VM_JSR _Move_DOWN_
VM_WORD_DIR 65535
VM_JSR _Move_UP_
VM_WORD_DIR 65535
VM_JSR _BoolSwap_
VM_WORD_DIR 65535
VM_JSR _SetCurrentValue_
VM_WORD_DIR 65535
VM_JSR _Increment_WORD_
VM_WORD_DIR 65535
VM_JSR _Decrement_WORD_
VM_WORD_DIR 65535
VM_JSR _Increment_DWORD_
VM_WORD_DIR 65535
VM_JSR _Decrement_DWORD_
VM_WORD_DIR 65535
VM_JSR _Increment_REAL_0_
VM_WORD_DIR 65535
VM_JSR _Decrement_REAL_0_
VM_WORD_DIR 65535
VM_JSR _Increment_REAL_1_
VM_WORD_DIR 65535
VM_JSR _Decrement_REAL_1_
VM_WORD_DIR 65535
VM_JSR _TIMED_LOOP_
VM_WORD_DIR 65535
VM_JSR _Main_1_PRG_
VM_WORD_DIR 65535
VM_JSR _Terminal1_ESC_
VM_WORD_DIR 65535
VM_JSR _Main_1_ESC_
VM_WORD_DIR 65535
VM_JSR _gotoAlarmLog_
VM_WORD_DIR 65535
VM_JSR _CheckActiveAlarm_
VM_WORD_DIR 65535
VM_JSR _ResetGlobalAlarm_
VM_WORD_DIR 65535
VM_JSR _ScrollAlarm_UP_
VM_WORD_DIR 65535
VM_JSR _ScrollAlarm_DOWN_
VM_WORD_DIR 65535
VM_JSR _ScrollAlarmLog_UP_
VM_WORD_DIR 65535
VM_JSR _ScrollAlarmLog_DOWN_
VM_WORD_DIR 65535
VM_JSR _Dummy_Class_UP_
VM_WORD_DIR 65535
VM_JSR _Dummy_Class_DOWN_
VM_WORD_DIR 65535
VM_JSR _Main_3_ENTER_
VM_WORD_DIR 65535
VM_JSR ___INIT___
VM_WORD_DIR 65535

DCL BOOL X dummy
DCL DINT X AlrmIdx
DCL DINT X AlrmCode
DCL DINT X AlrmLogsIdx
DCL DINT X AlrmLogCode
DCL USINT X AlrmLogEventType
DCL DINT X N_Alrms
DCL WORD X __SYSVA_TMP_VALUE
DCL INT X __SYSVA_KEY_COUNTER
DCL DWORD X __SYSVA_TMP_VALUE
DCL REAL X __SYSVA_TMP_VALUE
DCL DINT EF N_Alrms_Prev
DCL BOOL EF EnCheckAlarm
DCL BOOL EF isNoAlarmMask
DCL BOOL EF isActiveAlarmLoop
DCL USINT X __SYSVA_MANUAL_BUZZER_OFF
DCL USINT X __SYSVA_MANUAL_BUZZER_ON
DCL DINT X Alarms.AlrmTime
DCL REAL EF AlrmStoredVarReal1
DCL BOOL EF EnStoredVar1_REAL
DCL REAL EF AlrmStoredVarReal2
DCL BOOL EF EnStoredVar2_REAL
DCL BOOL EF En_CheckAlrm_Reset
DCL BOOL EF old_Unit_ManMode
DCL BOOL X Unit.ManMode
DCL BOOL X MaskActive
DCL DINT EF AlrmLogsTot
DCL DINT X Alarms.AlrmLogTime
DCL DINT EF infoLogOk
DCL DINT EF LastValidRecord
DCL DINT EF AlrmLogsIdxTemp
DCL DINT EF AlrmLogInfoErr
DCL DINT EF AlrmLogCodeTemp
DCL USINT EF AlrmLogEventTypeTemp
DCL DINT EF AlrmLogTimeTemp
DCL BOOL X BlowingON

; Move_DOWN()
VM_FUNCTION _Move_DOWN_
VM_DATA 0
EF_NEXT_MASK
VM_RTS

; Move_UP()
VM_FUNCTION _Move_UP_
VM_DATA 0
EF_PREVIOUS_MASK
VM_RTS

; BoolSwap()
VM_FUNCTION _BoolSwap_
VM_DATA 0
EF_SWAP
VM_RTS

; SetCurrentValue()
VM_FUNCTION _SetCurrentValue_
VM_DATA 0
EF_COMPARE
EF_NEXT_FIELD
VM_RTS

; Increment_WORD()
VM_FUNCTION _Increment_WORD_
VM_DATA 0
VM_PUSH WORD X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT WORD
VM_ADD WORD
VM_POP WORD X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_INCR
VM_RTS

; Decrement_WORD()
VM_FUNCTION _Decrement_WORD_
VM_DATA 0
VM_PUSH WORD X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT WORD
VM_SUB WORD
VM_POP WORD X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_DECR
VM_RTS

; Increment_DWORD()
VM_FUNCTION _Increment_DWORD_
VM_DATA 0
VM_PUSH DWORD X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT DWORD
VM_ADD DWORD
VM_POP DWORD X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_INCR
VM_RTS

; Decrement_DWORD()
VM_FUNCTION _Decrement_DWORD_
VM_DATA 0
VM_PUSH DWORD X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT DWORD
VM_SUB DWORD
VM_POP DWORD X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_DECR
VM_RTS

; Increment_REAL_0()
VM_FUNCTION _Increment_REAL_0_
VM_DATA 0
VM_PUSH REAL X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_ADD REAL
VM_POP REAL X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_INCR
VM_RTS

; Decrement_REAL_0()
VM_FUNCTION _Decrement_REAL_0_
VM_DATA 0
VM_PUSH REAL X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_SUB REAL
VM_POP REAL X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_DECR
VM_RTS

; Increment_REAL_1()
VM_FUNCTION _Increment_REAL_1_
VM_DATA 0
VM_PUSH REAL X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_PUSH_IMM REAL 10
VM_DIV REAL
VM_ADD REAL
VM_POP REAL X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_INCR
VM_RTS

; Decrement_REAL_1()
VM_FUNCTION _Decrement_REAL_1_
VM_DATA 0
VM_PUSH REAL X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_PUSH_IMM REAL 10
VM_DIV REAL
VM_SUB REAL
VM_POP REAL X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_DECR
VM_RTS

; CheckStoredVar_Alrm()
VM_FUNCTION _CheckStoredVar_Alrm_
VM_DATA 0
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM USINT 1
VM_PUSH_AMP REAL EF AlrmStoredVarReal1
VM_SYSTEM 35
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_JZ L4
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF EnStoredVar1_REAL
VM_JUMP L5
VM_LABEL L4
; ELSE
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF EnStoredVar1_REAL
; END_IF
VM_LABEL L5
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM USINT 2
VM_PUSH_AMP REAL EF AlrmStoredVarReal2
VM_SYSTEM 35
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_JZ L7
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF EnStoredVar2_REAL
VM_JUMP L8
VM_LABEL L7
; ELSE
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF EnStoredVar2_REAL
; END_IF
VM_LABEL L8
VM_RTS

; CheckActiveAlarm()
VM_FUNCTION _CheckActiveAlarm_
VM_DATA 4
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF EnCheckAlarm
VM_SYSTEM 32
VM_POP DINT X N_Alrms
VM_PUSH_IMM USINT 1
VM_POP USINT X __SYSVA_MANUAL_BUZZER_OFF
VM_PUSH_IMM USINT 0
VM_POP USINT X __SYSVA_MANUAL_BUZZER_ON
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_GT DINT
VM_JZ L3
; THEN
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 1
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_PUSH_IMM DINT 1
VM_POP DINT X AlrmIdx
VM_PUSH DINT X AlrmIdx
VM_PUSH_AMP DINT X AlrmCode
VM_PUSH_AMP DINT X Alarms.AlrmTime
VM_SYSTEM 33
VM_POPL DINT 0
VM_JSR _CheckStoredVar_Alrm_
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF isActiveAlarmLoop
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF isNoAlarmMask
EF_GOTO_MASK Alrms_Active
VM_JUMP L10
VM_LABEL L3
; ELSE
VM_PUSH_IMM DINT 0
VM_POP DINT X AlrmIdx
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
; IF
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_PUSH_IMM INT 1
VM_CMP_LE INT
VM_JZ L12
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF isNoAlarmMask
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF isActiveAlarmLoop
EF_GOTO_MASK Alrms_NoAlrms
VM_JUMP L13
VM_LABEL L12
; IF
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_PUSH_IMM INT 3
VM_CMP_GE INT
VM_JZ L14
; THEN
VM_SYSTEM 36
VM_POP_AWAY DINT
VM_PUSH_IMM DINT 0
VM_POP DINT X AlrmIdx
VM_LABEL L14
; END_IF
VM_LABEL L13
; END_IF
VM_LABEL L10
VM_RTS

; CheckAlarm()
VM_FUNCTION _CheckAlarm_
VM_DATA 0
VM_SYSTEM 32
VM_POP DINT X N_Alrms
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH DINT EF N_Alrms_Prev
VM_CMP_GT DINT
VM_JZ L0
; THEN
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 2
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF EnCheckAlarm
; IF
VM_PUSH BOOL EF isNoAlarmMask
VM_DUP BOOL
VM_JNZ L2
VM_POP_AWAY BOOL
VM_PUSH BOOL EF isActiveAlarmLoop
VM_LABEL L2
VM_JZ L1
; THEN
VM_JSR _CheckActiveAlarm_
VM_LABEL L1
; END_IF
VM_JUMP L15
VM_LABEL L0
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_DUP BOOL
VM_JZ L17
VM_POP_AWAY BOOL
VM_PUSH DINT X N_Alrms
VM_PUSH DINT EF N_Alrms_Prev
VM_CMP_LT DINT
VM_LABEL L17
VM_JZ L16
; THEN
VM_PUSH_IMM USINT 1
VM_POP USINT X __SYSVA_MANUAL_BUZZER_OFF
VM_PUSH_IMM USINT 0
VM_POP USINT X __SYSVA_MANUAL_BUZZER_ON
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
; IF
VM_PUSH BOOL EF isActiveAlarmLoop
VM_JZ L18
; THEN
VM_JSR _CheckActiveAlarm_
VM_LABEL L18
; END_IF
VM_JUMP L19
VM_LABEL L16
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH DINT EF N_Alrms_Prev
VM_CMP_LT DINT
VM_JZ L20
; THEN
; IF
VM_PUSH BOOL EF isActiveAlarmLoop
VM_JZ L21
; THEN
VM_JSR _CheckActiveAlarm_
VM_LABEL L21
; END_IF
VM_LABEL L20
; END_IF
VM_LABEL L19
VM_LABEL L15
VM_PUSH DINT X N_Alrms
VM_POP DINT EF N_Alrms_Prev
VM_RTS

; CheckAlrm_Reset()
VM_FUNCTION _CheckAlrm_Reset_
VM_DATA 0
; IF
VM_PUSH BOOL EF En_CheckAlrm_Reset
VM_JZ L22
; THEN
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_JZ L23
; THEN
EF_GOTO_MASK Alrms_NoAlrms
VM_JUMP L24
VM_LABEL L23
; ELSE
VM_JSR _CheckActiveAlarm_
; END_IF
VM_LABEL L24
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF En_CheckAlrm_Reset
VM_LABEL L22
; END_IF
VM_RTS

; TIMED_LOOP()
VM_FUNCTION _TIMED_LOOP_
VM_DATA 0
VM_JSR _CheckAlarm_
VM_JSR _CheckAlrm_Reset_
; IF
VM_PUSH BOOL EF old_Unit_ManMode
VM_PUSH BOOL X Unit.ManMode
VM_CMP_NE BOOL
VM_JZ L26
; THEN
VM_PUSH BOOL X Unit.ManMode
VM_POP BOOL EF old_Unit_ManMode
EF_GOTO_MASK Main_1
VM_LABEL L26
; END_IF
; IF
VM_PUSH BOOL X MaskActive
VM_JZ L27
; THEN
EF_GOTO_MASK Main_3
VM_LABEL L27
; END_IF
VM_RTS

; Main_1_PRG()
VM_FUNCTION _Main_1_PRG_
VM_DATA 0
EF_GOTO_MASK Settings_1
VM_RTS

; Terminal1_ESC()
VM_FUNCTION _Terminal1_ESC_
VM_DATA 0
EF_GOTO_MASK Main_1
VM_RTS

; Main_1_ESC()
VM_FUNCTION _Main_1_ESC_
VM_DATA 0
EF_GOTO_MASK Info_1
VM_RTS

; CheckStoredVar_Log()
VM_FUNCTION _CheckStoredVar_Log_
VM_DATA 0
; IF
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_IMM USINT 1
VM_PUSH_AMP REAL EF AlrmStoredVarReal1
VM_SYSTEM 42
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_JZ L29
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF EnStoredVar1_REAL
VM_JUMP L30
VM_LABEL L29
; ELSE
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF EnStoredVar1_REAL
; END_IF
VM_LABEL L30
; IF
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_IMM USINT 2
VM_PUSH_AMP REAL EF AlrmStoredVarReal2
VM_SYSTEM 42
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_JZ L32
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF EnStoredVar2_REAL
VM_JUMP L33
VM_LABEL L32
; ELSE
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF EnStoredVar2_REAL
; END_IF
VM_LABEL L33
VM_RTS

; gotoAlarmLog()
VM_FUNCTION _gotoAlarmLog_
VM_DATA 0
VM_SYSTEM 39
VM_POP DINT EF AlrmLogsTot
; IF
VM_PUSH DINT EF AlrmLogsTot
VM_PUSH_IMM DINT 0
VM_CMP_GT DINT
VM_JZ L28
; THEN
VM_PUSH_IMM DINT 1
VM_POP DINT X AlrmLogsIdx
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_AMP DINT X AlrmLogCode
VM_PUSH_AMP USINT X AlrmLogEventType
VM_PUSH_AMP DINT X Alarms.AlrmLogTime
VM_SYSTEM 40
VM_POP DINT EF infoLogOk
VM_JSR _CheckStoredVar_Log_
VM_JUMP L35
VM_LABEL L28
; ELSE
VM_PUSH_IMM DINT 0
VM_POP DINT X AlrmLogsIdx
VM_PUSH_IMM DINT -1
VM_POP DINT EF infoLogOk
; END_IF
VM_LABEL L35
; IF
VM_PUSH DINT EF infoLogOk
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_JZ L37
; THEN
VM_PUSH DINT X AlrmLogsIdx
VM_POP DINT EF LastValidRecord
EF_GOTO_MASK Alrms_Log
VM_JUMP L38
VM_LABEL L37
; ELSE
EF_GOTO_MASK Alrms_NoLog
; END_IF
VM_LABEL L38
VM_RTS

; ResetGlobalAlarm()
VM_FUNCTION _ResetGlobalAlarm_
VM_DATA 0
; IF
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_PUSH_IMM INT 3
VM_CMP_GE INT
VM_JZ L40
; THEN
VM_SYSTEM 36
VM_POP_AWAY DINT
VM_PUSH_IMM DINT 1
VM_POP DINT X AlrmIdx
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF En_CheckAlrm_Reset
VM_LABEL L40
; END_IF
VM_RTS

; ScrollAlarm_UP()
VM_FUNCTION _ScrollAlarm_UP_
VM_DATA 0
VM_SYSTEM 32
VM_POP DINT X N_Alrms
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_GT DINT
VM_JZ L41
; THEN
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM DINT 1
VM_CMP_GT DINT
VM_DUP BOOL
VM_JZ L43
VM_POP_AWAY BOOL
VM_PUSH DINT X AlrmIdx
VM_PUSH DINT X N_Alrms
VM_CMP_LE DINT
VM_LABEL L43
VM_JZ L42
; THEN
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X AlrmIdx
VM_JUMP L44
VM_LABEL L42
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM DINT 1
VM_CMP_EQ DINT
VM_JZ L45
; THEN
VM_PUSH_IMM DINT 0
VM_POP DINT X AlrmIdx
EF_PREVIOUS_MASK
VM_JUMP L46
VM_LABEL L45
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_DUP BOOL
VM_JZ L48
VM_POP_AWAY BOOL
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_LABEL L48
VM_JZ L47
; THEN
VM_PUSH DINT X N_Alrms
VM_POP DINT X AlrmIdx
EF_PREVIOUS_MASK
VM_LABEL L47
; END_IF
VM_LABEL L46
VM_LABEL L44
VM_PUSH DINT X AlrmIdx
VM_PUSH_AMP DINT X AlrmCode
VM_PUSH_AMP DINT X Alarms.AlrmTime
VM_SYSTEM 33
VM_POP_AWAY DINT
VM_JSR _CheckStoredVar_Alrm_
VM_JUMP L49
VM_LABEL L41
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_JZ L50
; THEN
EF_GOTO_MASK Alrms_NoAlrms
VM_LABEL L50
; END_IF
VM_LABEL L49
VM_RTS

; ScrollAlarm_DOWN()
VM_FUNCTION _ScrollAlarm_DOWN_
VM_DATA 0
VM_SYSTEM 32
VM_POP DINT X N_Alrms
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_DUP BOOL
VM_JZ L52
VM_POP_AWAY BOOL
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_LABEL L52
VM_JZ L51
; THEN
EF_NEXT_MASK
VM_LABEL L51
; END_IF
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_GE DINT
VM_DUP BOOL
VM_JZ L54
VM_POP_AWAY BOOL
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_LABEL L54
VM_JZ L53
; THEN
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM DINT 0
VM_CMP_GE DINT
VM_DUP BOOL
VM_JZ L56
VM_POP_AWAY BOOL
VM_PUSH DINT X AlrmIdx
VM_PUSH DINT X N_Alrms
VM_CMP_LT DINT
VM_LABEL L56
VM_JZ L55
; THEN
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X AlrmIdx
VM_JUMP L57
VM_LABEL L55
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH DINT X N_Alrms
VM_CMP_GE DINT
VM_JZ L58
; THEN
VM_PUSH_IMM DINT 0
VM_POP DINT X AlrmIdx
EF_NEXT_MASK
VM_LABEL L58
; END_IF
VM_LABEL L57
VM_PUSH DINT X AlrmIdx
VM_PUSH_AMP DINT X AlrmCode
VM_PUSH_AMP DINT X Alarms.AlrmTime
VM_SYSTEM 33
VM_POP_AWAY DINT
VM_JSR _CheckStoredVar_Alrm_
VM_JUMP L59
VM_LABEL L53
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_JZ L60
; THEN
EF_GOTO_MASK Alrms_NoAlrms
VM_LABEL L60
; END_IF
VM_LABEL L59
VM_RTS

; ScrollAlarmLog_UP()
VM_FUNCTION _ScrollAlarmLog_UP_
VM_DATA 0
; IF
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_IMM DINT 1
VM_CMP_EQ DINT
VM_JZ L61
; THEN
EF_BEEP
VM_JUMP L62
VM_LABEL L61
; ELSE
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X AlrmLogsIdx
VM_PUSH DINT EF AlrmLogsIdxTemp
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT EF AlrmLogsIdxTemp
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_AMP DINT X AlrmLogCode
VM_PUSH_AMP USINT X AlrmLogEventType
VM_PUSH_AMP DINT X Alarms.AlrmLogTime
VM_SYSTEM 40
VM_POP DINT EF AlrmLogInfoErr
VM_JSR _CheckStoredVar_Log_
; END_IF
VM_LABEL L62
VM_RTS

; ScrollAlarmLog_DOWN()
VM_FUNCTION _ScrollAlarmLog_DOWN_
VM_DATA 0
VM_PUSH DINT X AlrmLogsIdx
VM_POP DINT EF AlrmLogsIdxTemp
VM_PUSH DINT EF AlrmLogsIdxTemp
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT EF AlrmLogsIdxTemp
VM_PUSH DINT EF AlrmLogsIdxTemp
VM_PUSH_AMP DINT EF AlrmLogCodeTemp
VM_PUSH_AMP USINT EF AlrmLogEventTypeTemp
VM_PUSH_AMP DINT EF AlrmLogTimeTemp
VM_SYSTEM 40
VM_POP DINT EF AlrmLogInfoErr
; IF
VM_PUSH DINT EF AlrmLogInfoErr
VM_PUSH_IMM DINT 1
VM_CMP_EQ DINT
VM_JZ L64
; THEN
EF_BEEP
VM_JUMP L65
VM_LABEL L64
; ELSE
; IF
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_IMM DINT 64
VM_CMP_LT DINT
VM_JZ L67
; THEN
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X AlrmLogsIdx
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_AMP DINT X AlrmLogCode
VM_PUSH_AMP USINT X AlrmLogEventType
VM_PUSH_AMP DINT X Alarms.AlrmLogTime
VM_SYSTEM 40
VM_POP DINT EF AlrmLogInfoErr
VM_JSR _CheckStoredVar_Log_
VM_JUMP L68
VM_LABEL L67
; ELSE
VM_PUSH_IMM DINT 64
VM_POP DINT X AlrmLogsIdx
EF_BEEP
; END_IF
VM_LABEL L68
; END_IF
VM_LABEL L65
VM_RTS

; Dummy_Class_UP()
VM_FUNCTION _Dummy_Class_UP_
VM_DATA 0
EF_PREVIOUS_MASK
VM_RTS

; Dummy_Class_DOWN()
VM_FUNCTION _Dummy_Class_DOWN_
VM_DATA 0
EF_NEXT_MASK
VM_RTS

; Main_3_ENTER()
VM_FUNCTION _Main_3_ENTER_
VM_DATA 0
VM_PUSH_IMM BOOL 1
VM_POP BOOL X BlowingON
VM_PUSH_IMM BOOL 0
VM_POP BOOL X MaskActive
EF_GOTO_MASK Main_1
VM_RTS

; __INIT__()
VM_FUNCTION ___INIT___
VM_DATA 0
VM_RTS
